plugins {
	id 'java-library'
	id 'net.neoforged.moddev.legacyforge' version '2.0.91'
	id 'idea'
}

tasks.named('wrapper', Wrapper).configure {
	// Define wrapper values here so as to not have to always do so when updating gradlew.properties.
	// Switching this to Wrapper.DistributionType.ALL will download the full gradle sources that comes with
	// documentation attached on cursor hover of gradle classes and methods. However, this comes with increased
	// file size for Gradle. If you do switch this to ALL, run the Gradle wrapper task twice afterwards.
	// (Verify by checking gradle/wrapper/gradle-wrapper.properties to see if distributionUrl now points to `-all`)
	distributionType = Wrapper.DistributionType.BIN
}

version = minecraft_version+'-'+port_version+'+v'+new Date().format('yyMMdd')
group = mod_id

repositories {
	mavenLocal()
}

base {
	archivesName = archives_base_name
}

// Mojang ships Java 17 to end users in 1.20.1, so mods should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

legacyForge {
	// Specify the version of MinecraftForge to use.
	version = project.minecraft_version + '-' + project.forge_version

	// This line is optional. Access Transformers are automatically detected
	// accessTransformers = project.files('src/main/resources/META-INF/accesstransformer.cfg')

	// Default run configurations.
	// These can be tweaked, removed, or duplicated as needed.
	runs {
		client {
			client()

			// Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
			systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
		}

		server {
			server()
			programArgument '--nogui'
			systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
		}

		// applies to all the run configs above
		configureEach {
			// Recommended logging data for a userdev environment
			// The markers can be added/remove as needed separated by commas.
			// "SCAN": For mods scan.
			// "REGISTRIES": For firing of registry events.
			// "REGISTRYDUMP": For getting the contents of all registries.
			systemProperty 'forge.logging.markers', 'REGISTRIES'

			// Recommended logging level for the console
			// You can set various levels here.
			// Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
			logLevel = org.slf4j.event.Level.DEBUG
		}
	}

	mods {
		// define mod <-> source bindings
		// these are used to tell the game which sources are for which mod
		// multi mod projects should define one per mod
		"${mod_id}" {
			sourceSet(sourceSets.main)
		}
	}
}

// Sets up a dependency configuration called 'localRuntime'.
// This configuration should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
	runtimeClasspath.extendsFrom localRuntime
}
obfuscation {
	createRemappingConfiguration(configurations.localRuntime)
}

mixin {
	add sourceSets.main, "${mod_id}.refmap.json"
	config "${mod_id}.mixins.json"
}

dependencies {
	annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
	compileOnly 'org.jetbrains:annotations:20.1.0'

	compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.1"))
	implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.4.1"))
}

jar {
	manifest.attributes([
			"MixinConfigs": "${mod_id}.mixins.json"
	])
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
	var replaceProperties = [
			minecraft_version      : minecraft_version,
			minecraft_version_range: minecraft_version_range,
			forge_version          : forge_version,
			forge_version_range    : forge_version_range,
			loader_version_range   : loader_version_range,
			mod_id                 : mod_id,
			mod_name               : mod_name,
			mod_license            : mod_license,
			mod_version            : carpet_version+'+v'+port_version+'-'+new Date().format('yyMMdd'),
			mod_credits            : mod_credits,
			mod_authors            : mod_authors,
			mod_description        : mod_description,
			mod_issues             : mod_issues,
			mod_homepage           : mod_homepage
	]
	inputs.properties replaceProperties
	expand replaceProperties
	from "src/main/templates"
	into "build/generated/sources/modMetadata"
}
// Include the output of "generateModMetadata" as an input directory for the build
// this works with both building through Gradle and the IDE.
sourceSets.main.resources.srcDir generateModMetadata
// To avoid having to run "generateModMetadata" manually, make it run on every project reload
legacyForge.ideSyncTask generateModMetadata

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
	module {
		downloadSources = true
		downloadJavadoc = true
	}
}