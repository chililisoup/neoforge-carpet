buildscript {
	repositories {
		// These repositories are only for Gradle plugins, put any other repositories in the repository block further below
		maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
		mavenCentral()
	}
	dependencies {
		classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
	}
}

plugins {
	id 'java-library'
	id 'idea'
	id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
}

apply plugin: 'org.spongepowered.mixin'

tasks.named('wrapper', Wrapper).configure {
	// Define wrapper values here so as to not have to always do so when updating gradlew.properties.
	// Switching this to Wrapper.DistributionType.ALL will download the full gradle sources that comes with
	// documentation attached on cursor hover of gradle classes and methods. However, this comes with increased
	// file size for Gradle. If you do switch this to ALL, run the Gradle wrapper task twice afterwards.
	// (Verify by checking gradle/wrapper/gradle-wrapper.properties to see if distributionUrl now points to `-all`)
	distributionType = Wrapper.DistributionType.BIN
}

version = minecraft_version+'-'+port_version+'+v'+new Date().format('yyMMdd')
group = mod_id

repositories {
	mavenLocal()
	mavenCentral()
}

base {
	archivesName = archives_base_name
}

// Mojang ships Java 21 to end users starting in 1.20.5, so mods should target Java 21.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
	mappings channel: mapping_channel, version: mapping_version
	copyIdeResources = true

	// This property enables access transformers for use in development.
	// They will be applied to the Minecraft artifact.
	// The access transformer file can be anywhere in the project.
	// However, it must be at "META-INF/accesstransformer.cfg" in the final mod jar to be loaded by Forge.
	// This default location is a best practice to automatically put the file in the right place in the final jar.
	// See https://docs.minecraftforge.net/en/latest/advanced/accesstransformers/ for more information.
	 accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

	// Default run configurations.
	// These can be tweaked, removed, or duplicated as needed.
	runs {
		client {
			// Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
			property 'forge.enabledGameTestNamespaces', mod_id
		}

		server {
			property 'forge.enabledGameTestNamespaces', mod_id
			args '--nogui'
		}

		// applies to all the run configs above
		configureEach {
			// Recommended logging data for a userdev environment
			// The markers can be added/remove as needed separated by commas.
			// "SCAN": For mods scan.
			// "REGISTRIES": For firing of registry events.
			// "REGISTRYDUMP": For getting the contents of all registries.
			property 'forge.logging.markers', 'REGISTRIES'

			// Recommended logging level for the console
			// You can set various levels here.
			// Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
			property 'forge.logging.console.level', 'debug'

			mods {
				// define mod <-> source bindings
				// these are used to tell the game which sources are for which mod
				// multi mod projects should define one per mod
				"${mod_id}" {
					source sourceSets.main
				}
			}
		}
	}
}

mixin {
	add sourceSets.main, "${mod_id}.refmap.json"

	config "${mod_id}.mixins.json"
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// Sets up a dependency configuration called 'localRuntime'.
// This configuration should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
	runtimeClasspath.extendsFrom localRuntime
}

dependencies {
	minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

	compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.1"))
	implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.4.1")) {
		jarJar.ranged(it, "[0.4.1,)")
	}

	annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.named('processResources', ProcessResources).configure {
	var replaceProperties = [
			minecraft_version      : minecraft_version,
			minecraft_version_range: minecraft_version_range,
			forge_version          : forge_version,
			forge_version_range    : forge_version_range,
			loader_version_range   : loader_version_range,
			mod_id                 : mod_id,
			mod_name               : mod_name,
			mod_license            : mod_license,
			mod_version            : carpet_version+'+v'+port_version+new Date().format('yyMMdd'),
			mod_credits            : mod_credits,
			mod_authors            : mod_authors,
			mod_description        : mod_description,
			mod_issues             : mod_issues,
			mod_homepage           : mod_homepage
	]

	inputs.properties replaceProperties
	filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
		expand replaceProperties + [project: project]
	}
}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
	manifest {
		attributes([
				"Specification-Title": mod_id,
				"Specification-Vendor": mod_authors,
				"Specification-Version": "1", // We are version 1 of ourselves
				"Implementation-Title": project.name,
				"Implementation-Version": project.jar.archiveVersion,
				"Implementation-Vendor": mod_authors,
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}

	// This is the preferred method to reobfuscate your jar file
	finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
	module {
		downloadSources = true
		downloadJavadoc = true
	}
}
